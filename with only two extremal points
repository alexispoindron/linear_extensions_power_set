#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 23 10:42:11 2024

@author: alexispoindron
"""

N = [0, 1, 2, 3,4]
n = len(N)

import random
from itertools import permutations

def all_permutations(L):
    return list(permutations(L))

def generate_subsets(N):
    all_subsets = [[]]
    for element in N:
        current_subsets = [subset + [element] for subset in all_subsets]
        all_subsets.extend(current_subsets)
    return all_subsets

def rename(S, permutation):
    return [permutation[element] for element in S]

def hypercube_EL(N):
    return generate_subsets(N)

def permutation(EL, N):
    permutation = random.choice(all_permutations(N))
    for i in range(len(EL)):
        EL[i] = rename(EL[i], permutation)
        EL[i].sort()
    return EL

def cardinality_EL(N):
    card = []
    for k in range(n + 1):
        card.append([])
    for S in generate_subsets(N):
        card[len(S)].append(S)
    for k in range(n + 1):
        card[k] = list(random.choice(all_permutations(card[k])))
    card2 = []
    for k in range(n + 1):
        for S in card[k]:
            card2.append(S)
    return card2

def sequence_HT():
    HT = []
    for k in range(2**n):
        if random.random() < 1/2:
            HT.append("H")
        else:
            HT.append("T")
    return HT

def next_track(EL_ref, track, EL_result):
    xini = track
    while EL_ref[xini] in EL_result:
        xini += 1
    track = xini
    return (EL_ref[xini], track)

EL = [cardinality_EL(N), hypercube_EL(N)]
track = [0, 0]
current = 0
sequence = sequence_HT()
EL_result = [EL[current][track[current]]]

for k in range(1, 2**n):
    if sequence[k] == "H":
        current = (current + 1) % 2
        next_track_result = next_track(EL[current], track[current], EL_result)
        EL_result.append(next_track_result[0])
        track[current] = next_track_result[1]
    else:
        next_track_result = next_track(EL[current], track[current], EL_result)
        EL_result.append(next_track_result[0])
        track[current] = next_track_result[1]

EL_result = permutation(EL_result, N)
print(EL_result)
