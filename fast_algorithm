#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Feb 24 11:20:03 2024

@author: alexispoindron
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 23 10:42:11 2024

@author: alexispoindron
"""
import time 

start=time.time()

N = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12]
n = len(N)

import random
from itertools import permutations

def all_permutations(L):
    return list(permutations(L))

def generate_k_random_permutations(elements, k):
    all_permutations = [tuple(elements)]
    for _ in range(k - 1):
        random_permutation = random.sample(elements, len(elements))
        while tuple(random_permutation) in all_permutations:
            random_permutation = random.sample(elements, len(elements))
        all_permutations.append(tuple(random_permutation)) 
    return all_permutations


def generate_subsets(N):
    all_subsets = [[]]
    for element in N:
        current_subsets = [subset + [element] for subset in all_subsets]
        all_subsets.extend(current_subsets)
    return all_subsets

def perren(S,order):
    L=S.copy()
    for k in range(len(L)):
        L[k]=order[L[k]]
    return L
        
def rename(EL, order):
    result = []
    for i in range(len(EL)):
        L = EL[i].copy()
        L = perren(L, order)
        L.sort()
        result.append(L)
    return result

def hypercube_EL(N):
    return generate_subsets(N)

def cardinality_EL(N):
    card = []
    for k in range(n + 1):
        card.append([])
    for S in generate_subsets(N):
        card[len(S)].append(S)
    for k in range(n + 1):
        card[k] = list(random.choice(all_permutations(card[k])))
    card2 = []
    for k in range(n + 1):
        for S in card[k]:
            card2.append(S)
    return card2


def next_track(EL_ref, track, EL_result):
    xini = track
    while EL_ref[xini] in EL_result:
        xini += 1
    track = xini
    return (EL_ref[xini], track)

def fact(n):
    if n==1:
        return 1
    else:
        return fact(n-1)*n
    

EL_base=hypercube_EL(N)

EL = []

for order in generate_k_random_permutations(N, 2**n):
    EL.append(rename(EL_base,order))
    
EL_final=[]
for k in range(len(EL)):
    if EL[k] not in EL_final:
        EL_final.append(EL[k])


track = []
for k in range(fact(n)):
    track.append(0)
EL_result = [EL[0][track[0]]]

for k in range(1, 2**n):
    next_track_result = next_track(EL[k], track[k], EL_result)
    EL_result.append(next_track_result[0])
    track[k] = next_track_result[1]


end=time.time()

#for k in range(len(EL_result)):
 #   print(EL_result[k])

print("time=",end-start)
